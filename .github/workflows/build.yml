name: Build All Platforms
on: [push]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
         node-version: 20
      - run: |
          mkdir -p server/database
          mkdir -p server/uploads
          npm install
          npm run build -- --win
      - uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/

  build-mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          mkdir -p www
          cp -R src/* www/ || xcopy /E /Y src\\* www\\ 
          npm install
          npm run build -- --mac
      - uses: actions/upload-artifact@v4
        with:
          name: mac-build
          path: dist/

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          mkdir -p www
          cp -R src/* www/ || true
          echo '{
          "appId": "com.example.quotation",
          "appName": "报价单系统",
          "webDir": "www"
          }' > capacitor.config.json
          npm install
          npx cap add android
          npx cap sync
          cd android && ./gradlew assembleDebug
      - uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: android/app/build/outputs/apk/debug/


  build-ios:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Ensure Config Exists
        run: |
          if [ ! -f "capacitor.config.json" ]; then
            echo '{
              "appId": "com.example.quotation",
              "appName": "报价单系统",
              "webDir": "www",
              "bundledWebRuntime": false
            }' > capacitor.config.json
          fi

      - name: Setup Environment
        run: |
          # 安装系统级必要工具
          brew install cocoapods || true
          sudo gem install cocoapods -v 1.11.3
      
      - name: Build Process
        run: |
          # 1. 彻底清理环境
          rm -rf www ios/android node_modules/.cache
    
          # 2. 重建目录结构
          mkdir -p www
          [ -d "src" ] && cp -R src/* www/ || { echo "Error: src directory missing"; exit 1; }

          # 3. 初始化前确保必要依赖存在 (关键修复)
          npm install -g @capacitor/cli@5.7.8
          npm install \
            @capacitor/core@5.7.8 \
            @capacitor/ios@5.7.8 \
            --save-exact --no-package-lock --force

          # 4. 双重初始化机制
          if [ ! -f "capacitor.config.json" ]; then
            npx cap init "报价单系统" "com.example.quotation" --web-dir www
          else
            npx cap sync
          fi

          # 5. 平台添加安全机制
          if [ ! -d "ios" ]; then
            echo "Adding iOS platform with retry..."
            npx cap add ios || {
              sleep 5
              npx cap add ios || exit 1
            }
          fi

          # 6. 最终同步
          npx cap sync

          # 7. 智能Pod安装 (带三重重试)
          cd ios/App || cd ios
          for i in {1..3}; do
            pod install --repo-update && break
            sleep $((i*2))
            [ $i -eq 3 ] && exit 1
          done
          cd ../..

      - name: Verify Structure
        run: |
            echo "项目根目录：$(pwd)"
            echo "iOS目录结构："
            ls -la ios/
            echo "Xcode项目验证："
            find ios -name "*.xcodeproj" -exec ls -ld {} \;
            echo "Capacitor验证："
            ls -l node_modules/@capacitor/ios/

      - name: Build Unsigned IPA
        run: |
              # 1. 清理环境
              rm -rf build Payload ios/Pods ios/Podfile.lock
              mkdir -p build/ipa
          
              # 2. 验证项目结构
              echo "项目根目录：$(pwd)"
              echo "Capacitor路径验证："
              ls -l node_modules/@capacitor/ios/Capacitor.podspec || {
                echo "错误：Capacitor未正确安装"
                npm install @capacitor/ios
              }
          
              # 3. 创建精确的Podfile（关键修复）
              echo "platform :ios, '17.0'
              project 'App/App.xcodeproj'
              workspace 'App/App.xcworkspace'
              target 'App' do
                use_frameworks!
                pod 'Capacitor', :path => '$(pwd)/node_modules/@capacitor/ios'
                pod 'CapacitorCordova', :path => '$(pwd)/node_modules/@capacitor/ios'
              end
          
              post_install do |installer|
                installer.pods_project.targets.each do |target|
                  target.build_configurations.each do |config|
                    config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                    config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
                  end
                end
              end" > ios/Podfile
          
              # 4. 安装Pods（绝对路径方案）
              cd ios
              echo "当前工作目录：$(pwd)"
              echo "Podfile内容："
              cat Podfile
              echo "Capacitor绝对路径：$(pwd)/../node_modules/@capacitor/ios"
              ls -l ../node_modules/@capacitor/ios/Capacitor.podspec || {
                echo "错误：Capacitor.podspec不存在！"
                exit 1
              }
              
              # 彻底清理后安装
              pod deintegrate App/App.xcodeproj
              pod install --repo-update
              cd ..
          
              # 5. 构建命令
              xcodebuild -workspace ios/App/App.xcworkspace \
                        -scheme App \
                        -configuration Debug \
                        -sdk iphoneos \
                        CODE_SIGNING_ALLOWED=NO \
                        CODE_SIGN_IDENTITY="" \
                        CODE_SIGNING_REQUIRED=NO \
                        DEVELOPMENT_TEAM="" \
                        build \
                        -derivedDataPath build
          
              # 6. 打包IPA
              APP_PATH=$(find build/Build/Products/Debug-iphoneos -name "*.app")
              mkdir Payload
              cp -r "$APP_PATH" Payload/
              (cd Payload && zip -qr ../build/ipa/App.ipa .)
              rm -rf Payload

      - uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: build/ipa  # 修正为实际输出路径
name: Build All Platforms
on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          mkdir -p server/database
          mkdir -p server/uploads
          npm install
          npm run build -- --win
      - uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: dist/

  build-mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 1. 安装依赖（包含 notarize 工具）
      - run: |
          mkdir -p www
          cp -R src/* www/ || true
          npm install
          npm install @electron/notarize --save-dev --package-lock-only
          npm ci --omit=dev

      # 2. 构建应用
      - run: npm run build -- --mac

      # 3. 配置公证
      - name: Notarize App
        env:
          APPLE_ID: "2441686096@qq.com"
          APPLE_ID_PASSWORD: ${{ secrets.AC_PASSWORD }}
        run: |
          # 精确查找.app文件路径
          APP_PATH=$(find dist -name "*.app" -type d | head -n 1)
          echo "Notarizing: $APP_PATH"
          
          node <<EOF
          const { notarize } = require('@electron/notarize');
          (async () => {
            try {
              await notarize({
                tool: 'notarytool',
                appPath: '$APP_PATH',
                bundleId: 'com.example.quotation',
                appleId: '$APPLE_ID',
                appleIdPassword: '$APPLE_ID_PASSWORD'
              });
              console.log('Notarization complete!');
            } catch (err) {
              console.error('Notarization failed:', err);
              process.exit(1);
            }
          })();
          EOF

      # 4. 验证公证结果
      - run: |
          APP_PATH=$(find dist -name "*.app" -type d | head -n 1)
          xcrun stapler validate "$APP_PATH"
          spctl -a -vv "$APP_PATH"

      # 5. 上传构建结果
      - uses: actions/upload-artifact@v4
        with:
          name: mac-build
          path: dist/

  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          mkdir -p www
          cp -R src/* www/ || true
          echo '{
          "appId": "com.example.quotation",
          "appName": "报价单系统",
          "webDir": "www"
          }' > capacitor.config.json
          npm install
          npx cap add android
          npx cap sync
          cd android && ./gradlew assembleDebug
      - uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: android/app/build/outputs/apk/debug/